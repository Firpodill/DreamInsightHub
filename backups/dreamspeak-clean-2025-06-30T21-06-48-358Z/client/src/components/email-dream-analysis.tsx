import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { 
  Dialog, 
  DialogContent, 
  DialogHeader, 
  DialogTitle, 
  DialogTrigger 
} from '@/components/ui/dialog';
import { Mail, Send, User } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import { Dream } from '@shared/schema';

interface EmailDreamAnalysisProps {
  dream: Dream;
  analysis: any;
}

export function EmailDreamAnalysis({ dream, analysis }: EmailDreamAnalysisProps) {
  const [open, setOpen] = useState(false);
  const [recipientEmail, setRecipientEmail] = useState('');
  const [recipientName, setRecipientName] = useState('');
  const [personalMessage, setPersonalMessage] = useState('');
  const [sending, setSending] = useState(false);
  const { toast } = useToast();

  const createEmailBody = () => {
    const dreamDate = new Date(dream.createdAt).toLocaleDateString();
    
    return `
<!DOCTYPE html>
<html>
<head>
    <style>
        body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; max-width: 600px; margin: 0 auto; padding: 20px; }
        .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 20px; border-radius: 8px; text-align: center; margin-bottom: 20px; }
        .section { background: #f9f9f9; padding: 15px; margin: 15px 0; border-radius: 8px; border-left: 4px solid #667eea; }
        .archetype { display: inline-block; background: #667eea; color: white; padding: 4px 8px; border-radius: 12px; font-size: 12px; margin: 2px; }
        .symbol { display: inline-block; background: #764ba2; color: white; padding: 4px 8px; border-radius: 12px; font-size: 12px; margin: 2px; }
        .footer { text-align: center; color: #666; font-size: 12px; margin-top: 30px; padding-top: 20px; border-top: 1px solid #eee; }
    </style>
</head>
<body>
    <div class="header">
        <h1>ðŸŒ™ Dream Analysis Report</h1>
        <p>Psychological insights from your subconscious mind</p>
        <p><strong>Date:</strong> ${dreamDate}</p>
    </div>

    ${personalMessage ? `<div class="section">
        <h3>Personal Message</h3>
        <p>${personalMessage}</p>
    </div>` : ''}

    <div class="section">
        <h3>ðŸ“– Dream Summary</h3>
        <p>${analysis.summary}</p>
    </div>

    <div class="section">
        <h3>ðŸ§  Jungian Interpretation</h3>
        <p>${analysis.jungianInterpretation}</p>
    </div>

    ${analysis.shadowWork ? `<div class="section">
        <h3>ðŸŒ‘ Shadow Work Insights</h3>
        <p>${analysis.shadowWork}</p>
    </div>` : ''}

    ${analysis.individuationStage ? `<div class="section">
        <h3>ðŸŽ¯ Individuation Stage</h3>
        <p>${analysis.individuationStage}</p>
    </div>` : ''}

    ${analysis.archetypes && analysis.archetypes.length > 0 ? `<div class="section">
        <h3>ðŸ‘‘ Detected Archetypes</h3>
        <p>Your dream contains these powerful psychological archetypes:</p>
        <div>
            ${analysis.archetypes.map((archetype: string) => `<span class="archetype">${archetype}</span>`).join('')}
        </div>
    </div>` : ''}

    ${analysis.symbols && analysis.symbols.length > 0 ? `<div class="section">
        <h3>ðŸ”® Dream Symbols</h3>
        <p>Key symbols detected in your dream:</p>
        <div>
            ${analysis.symbols.map((symbol: string) => `<span class="symbol">${symbol}</span>`).join('')}
        </div>
    </div>` : ''}

    ${analysis.recommendations ? `<div class="section">
        <h3>ðŸ’¡ Recommendations</h3>
        <p>${analysis.recommendations}</p>
    </div>` : ''}

    <div class="footer">
        <p>This analysis was generated by DreamSpeak - AI-powered dream interpretation using Jungian psychology and Joseph Campbell's Hero's Journey framework.</p>
        <p>Dreams are deeply personal. Use this analysis as a starting point for your own reflection and self-discovery.</p>
    </div>
</body>
</html>`;
  };

  const handleSendEmail = async () => {
    if (!recipientEmail || !recipientName) {
      toast({
        title: "Missing Information",
        description: "Please provide both recipient name and email address.",
        variant: "destructive"
      });
      return;
    }

    setSending(true);

    try {
      const emailBody = createEmailBody();
      const subject = `Dream Analysis Report - ${new Date(dream.createdAt).toLocaleDateString()}`;
      
      // Create mailto link with pre-filled content
      const mailtoLink = `mailto:${recipientEmail}?subject=${encodeURIComponent(subject)}&body=${encodeURIComponent(emailBody.replace(/<[^>]*>/g, '').replace(/\s+/g, ' ').trim())}`;
      
      // Try to open email client
      window.open(mailtoLink);
      
      toast({
        title: "Email Client Opened",
        description: "Your default email client should open with the dream analysis ready to send.",
        variant: "default"
      });
      
      setOpen(false);
      setRecipientEmail('');
      setRecipientName('');
      setPersonalMessage('');
      
    } catch (error) {
      toast({
        title: "Email Error",
        description: "Failed to prepare email. Please try copying the analysis manually.",
        variant: "destructive"
      });
    } finally {
      setSending(false);
    }
  };

  const copyAnalysisText = () => {
    const dreamDate = new Date(dream.createdAt).toLocaleDateString();
    const textVersion = `
DREAM ANALYSIS REPORT
Date: ${dreamDate}

${personalMessage ? `Personal Message:\n${personalMessage}\n\n` : ''}

DREAM SUMMARY:
${analysis.summary}

JUNGIAN INTERPRETATION:
${analysis.jungianInterpretation}

${analysis.shadowWork ? `SHADOW WORK INSIGHTS:\n${analysis.shadowWork}\n\n` : ''}

${analysis.individuationStage ? `INDIVIDUATION STAGE:\n${analysis.individuationStage}\n\n` : ''}

${analysis.archetypes && analysis.archetypes.length > 0 ? `DETECTED ARCHETYPES:\n${analysis.archetypes.join(', ')}\n\n` : ''}

${analysis.symbols && analysis.symbols.length > 0 ? `DREAM SYMBOLS:\n${analysis.symbols.join(', ')}\n\n` : ''}

${analysis.recommendations ? `RECOMMENDATIONS:\n${analysis.recommendations}\n\n` : ''}

---
Generated by DreamSpeak - AI-powered dream interpretation
    `.trim();

    navigator.clipboard.writeText(textVersion).then(() => {
      toast({
        title: "Analysis Copied",
        description: "Dream analysis has been copied to your clipboard.",
        variant: "default"
      });
    });
  };

  return (
    <Dialog open={open} onOpenChange={setOpen}>
      <DialogTrigger asChild>
        <Button variant="outline" size="sm" className="text-blue-600 border-blue-300 hover:bg-blue-50">
          <Mail className="w-4 h-4 mr-2" />
          Email Analysis
        </Button>
      </DialogTrigger>
      
      <DialogContent className="max-w-lg bg-white">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2 text-gray-800">
            <Mail className="w-5 h-5" />
            Email Dream Analysis
          </DialogTitle>
        </DialogHeader>
        
        <div className="space-y-4 py-4">
          <div className="grid grid-cols-2 gap-4">
            <div>
              <Label htmlFor="recipient-name" className="text-gray-700">
                Recipient Name
              </Label>
              <Input
                id="recipient-name"
                value={recipientName}
                onChange={(e) => setRecipientName(e.target.value)}
                placeholder="Enter name"
                className="mt-1"
              />
            </div>
            
            <div>
              <Label htmlFor="recipient-email" className="text-gray-700">
                Email Address
              </Label>
              <Input
                id="recipient-email"
                type="email"
                value={recipientEmail}
                onChange={(e) => setRecipientEmail(e.target.value)}
                placeholder="Enter email"
                className="mt-1"
              />
            </div>
          </div>
          
          <div>
            <Label htmlFor="personal-message" className="text-gray-700">
              Personal Message (Optional)
            </Label>
            <Textarea
              id="personal-message"
              value={personalMessage}
              onChange={(e) => setPersonalMessage(e.target.value)}
              placeholder="Add a personal note to include with the analysis..."
              className="mt-1 min-h-20"
              rows={3}
            />
          </div>
          
          <div className="flex gap-2 pt-4">
            <Button
              onClick={handleSendEmail}
              disabled={sending}
              className="flex-1 bg-blue-600 hover:bg-blue-700 text-white"
            >
              {sending ? (
                <>
                  <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin mr-2" />
                  Preparing...
                </>
              ) : (
                <>
                  <Send className="w-4 h-4 mr-2" />
                  Open Email Client
                </>
              )}
            </Button>
            
            <Button
              onClick={copyAnalysisText}
              variant="outline"
              className="text-gray-600 border-gray-300"
            >
              Copy Text
            </Button>
          </div>
          
          <p className="text-xs text-gray-500 text-center">
            This will open your default email client with the analysis pre-filled.
            If that doesn't work, use "Copy Text" to manually paste the content.
          </p>
        </div>
      </DialogContent>
    </Dialog>
  );
}